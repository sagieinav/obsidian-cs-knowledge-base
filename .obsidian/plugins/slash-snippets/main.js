/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var g=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var m=Object.prototype.hasOwnProperty;var S=(r,a)=>{for(var t in a)g(r,t,{get:a[t],enumerable:!0})},T=(r,a,t,e)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of d(a))!m.call(r,i)&&i!==t&&g(r,i,{get:()=>a[i],enumerable:!(e=c(a,i))||e.enumerable});return r};var w=r=>T(g({},"__esModule",{value:!0}),r);var y={};S(y,{default:()=>p});module.exports=w(y);var n=require("obsidian"),f={slashTrigger:"/",snippetPath:"Snippets",ignoreProperties:!0,templaterSupport:!0},o=class extends n.EditorSuggest{constructor(t){super(t.app);this.plugin=t}getAllSnippets(t){let e=this.app.vault.getMarkdownFiles(),i=[];for(let s=0;s<e.length;s++){let l=e[s];l.path.startsWith(this.plugin.settings.snippetPath)&&l.name.toLowerCase().contains(t.toLowerCase())&&i.push(l)}return i}getSuggestions(t){return this.getAllSnippets(t.query)}onTrigger(t,e,i){let s=e.getLine(t.line).slice(0,t.ch);if(!s.contains(this.plugin.settings.slashTrigger))return null;let l=s.lastIndexOf(this.plugin.settings.slashTrigger),u=s.slice(l+1,s.length);return{start:{...t,ch:l},end:t,query:u}}removeFrontmatter(t){return this.plugin.settings.ignoreProperties&&t.startsWith("---")?t.replace(/^---\n[\s\S]*?\n---\n?/,""):t}async selectSuggestion(t,e){var l;let i=await this.plugin.app.vault.cachedRead(t),s=this.removeFrontmatter(i);await((l=this.context)==null?void 0:l.editor.replaceRange(s,this.context.start,this.context.end)),this.plugin.settings.templaterSupport&&await this.plugin.runTemplaterReplace(),this.close()}renderSuggestion(t,e){e.createEl("div",{text:t.basename}),e.createEl("small",{text:t.path})}unload(){}},p=class extends n.Plugin{async onload(){await this.loadSettings(),this.registerEditorSuggest(new o(this)),this.addSettingTab(new h(this.app,this))}async runTemplaterReplace(){let t="templater-obsidian:replace-in-file-templater",e="editor:save-file";(await this.app).commands.executeCommandById(e),await this.delay(300),(await this.app).commands.executeCommandById(t)}async delay(t){return new Promise(e=>setTimeout(e,t))}onunload(){}async loadSettings(){this.settings=Object.assign({},f,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},h=class extends n.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new n.Setting(t).setName("Slash trigger").setDesc("Enter a character that will trigger template insert suggestion").addText(i=>i.setPlaceholder("Slash trigger").setValue(this.plugin.settings.slashTrigger).onChange(async s=>{s&&s.length>1?(new n.Notice("Please use one character to avoid conflict"),i.setValue(s[0])):(this.plugin.settings.slashTrigger=s,await this.plugin.saveSettings())})),new n.Setting(t).setName("Snippet path").setDesc("Set a folder that has all the snippets files").addText(i=>i.setPlaceholder("Snippet path").setValue(this.plugin.settings.snippetPath).onChange(async s=>{this.plugin.settings.snippetPath=s,await this.plugin.saveSettings()})),new n.Setting(t).setName("Ignore properties").setDesc("Enable this if you don't want to insert properties values in the snippets notes").addToggle(i=>{i.setValue(this.plugin.settings.ignoreProperties).onChange(async s=>{this.plugin.settings.ignoreProperties=s,await this.plugin.saveSettings()})});let e=document.createDocumentFragment();e.append("Enable this if you want to use ",e.createEl("a",{href:"https://github.com/SilentVoid13/Templater",text:"Templater"})," files inside snippets. (To use this, you need Templater plugin enabled)"),new n.Setting(t).setName("Enable Templater plugin support").setDesc(e).addToggle(i=>{i.setValue(this.plugin.settings.templaterSupport).onChange(async s=>{this.plugin.settings.templaterSupport=s,await this.plugin.saveSettings()})})}};
