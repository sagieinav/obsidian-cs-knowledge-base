/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin-
*/

var P=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var H=Object.prototype.hasOwnProperty;var F=(b,a)=>{for(var e in a)P(b,e,{get:a[e],enumerable:!0})},B=(b,a,e,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of $(a))!H.call(b,i)&&i!==e&&P(b,i,{get:()=>a[i],enumerable:!(t=L(a,i))||t.enumerable});return b};var R=b=>B(P({},"__esModule",{value:!0}),b);var N={};F(N,{default:()=>D});module.exports=R(N);var w=require("obsidian");var C={preset:"grid",imageProperty:"cover",imageHeight:"200px",imageFit:"cover",properties:"all",exclude:[],scrollableProperties:!1,contentHeight:"200px",showLabels:!0,cardSpacing:16,enableShadows:!0,propertiesAlign:"left",titleAlign:"left",fontSize:"default",booleanDisplayMode:"both",showBooleanLabels:!0,booleanTrueText:"true",booleanFalseText:"false",enableClickableCards:!1,defaultDateFormat:"YYYY-MM-DD",propertyFormatters:{},mobileColumns:1,mobilePreset:"grid",mobileImageHeight:"150px",mobileScrollableProperties:!0,mobileContentHeight:"150px",forceMobileMode:!1,enableLazyLoading:!1,enableDynamicUpdates:!1,refreshDelay:2500,debugMode:!1,showFileAsTitle:!0,dynamicColumns:!1,minCardWidth:"250px"};var h=require("obsidian"),v=class extends h.PluginSettingTab{constructor(a,e){super(a,e),this.plugin=e}display(){let{containerEl:a}=this;a.empty(),new h.Setting(a).setName("Settings reference").setDesc("Open the complete settings reference guide on the website.").addButton(c=>c.setButtonText("Open reference website").setCta().onClick(()=>{window.open("https://sophokles187.github.io/data-cards/#/settings-reference","_blank")})),new h.Setting(a).setName("Presets").setHeading(),new h.Setting(a).setName("Default preset").setDesc("Choose the default preset for cards").addDropdown(c=>c.addOption("grid","Grid (balanced, 3 columns)").addOption("portrait","Portrait (optimized for book covers, 3 columns)").addOption("square","Square (1:1 cards with minimal text, 4 columns)").addOption("compact","Compact (side-by-side layout, 4 columns)").addOption("dense","Dense (maximum density, 6 columns)").setValue(this.plugin.settings.preset).onChange(async g=>{this.plugin.settings.preset=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Images").setHeading(),new h.Setting(a).setName("Default image property").setDesc("The frontmatter property to use for images").addText(c=>c.setPlaceholder("cover").setValue(this.plugin.settings.imageProperty).onChange(async g=>{this.plugin.settings.imageProperty=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Display").setHeading(),new h.Setting(a).setName("Show property labels").setDesc("Show labels for properties").addToggle(c=>c.setValue(this.plugin.settings.showLabels).onChange(async g=>{this.plugin.settings.showLabels=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Card spacing").setDesc("Space between cards (in pixels)").addSlider(c=>c.setLimits(0,32,4).setValue(this.plugin.settings.cardSpacing).setDynamicTooltip().onChange(async g=>{this.plugin.settings.cardSpacing=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Enable card shadows").setDesc("Add subtle shadows to cards for a more three-dimensional appearance").addToggle(c=>c.setValue(this.plugin.settings.enableShadows).onChange(async g=>{this.plugin.settings.enableShadows=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Dynamic columns").setDesc("Automatically adjust the number of columns based on container width instead of using fixed columns").addToggle(c=>c.setValue(this.plugin.settings.dynamicColumns).onChange(async g=>{this.plugin.settings.dynamicColumns=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Minimum card width").setDesc("Minimum width for cards when using dynamic columns (e.g., 250px, 300px)").addText(c=>c.setPlaceholder("250px").setValue(this.plugin.settings.minCardWidth).onChange(async g=>{this.plugin.settings.minCardWidth=g||"250px",await this.plugin.saveSettings()})),new h.Setting(a).setName("Properties alignment").setDesc("Text alignment for properties and their labels").addDropdown(c=>c.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.propertiesAlign).onChange(async g=>{this.plugin.settings.propertiesAlign=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Title alignment").setDesc("Text alignment for the title (filename)").addDropdown(c=>c.addOption("left","Left").addOption("center","Center").addOption("right","Right").setValue(this.plugin.settings.titleAlign).onChange(async g=>{this.plugin.settings.titleAlign=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Show file as title").setDesc("When using TABLE WITHOUT ID, show the file name as the card title").addToggle(c=>c.setValue(this.plugin.settings.showFileAsTitle).onChange(async g=>{this.plugin.settings.showFileAsTitle=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Font size").setDesc("Text size for all card elements (properties, labels, and title)").addDropdown(c=>c.addOption("larger","Larger (120%)").addOption("large","Large (110%)").addOption("default","Default (100%)").addOption("small","Small (90% - similar to dense preset)").addOption("smaller","Smaller (80%)").setValue(this.plugin.settings.fontSize).onChange(async g=>{this.plugin.settings.fontSize=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Card content").setHeading(),new h.Setting(a).setName("Scrollable properties").setDesc("Enable scrolling for card properties when they exceed the content height (Note: Square and Compact presets are scrollable by default)").addToggle(c=>c.setValue(this.plugin.settings.scrollableProperties).onChange(async g=>{this.plugin.settings.scrollableProperties=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Card interaction").setHeading(),new h.Setting(a).setName("Enable clickable cards").setDesc("Make the entire card clickable to open the note (not just the title)").addToggle(c=>c.setValue(this.plugin.settings.enableClickableCards).onChange(async g=>{this.plugin.settings.enableClickableCards=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Content height").setDesc("Height of the scrollable content area (e.g., 200px)").addText(c=>c.setPlaceholder("200px").setValue(this.plugin.settings.contentHeight).onChange(async g=>{this.plugin.settings.contentHeight=g||"200px",await this.plugin.saveSettings()})),new h.Setting(a).setName("Formatting").setHeading(),new h.Setting(a).setName("Default date format").setDesc("Format for displaying dates (YYYY = year, MM = month, DD = day)").addText(c=>c.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.defaultDateFormat).onChange(async g=>{this.plugin.settings.defaultDateFormat=g||"YYYY-MM-DD",await this.plugin.saveSettings()})),new h.Setting(a).setName("Boolean display").setHeading(),new h.Setting(a).setName("Boolean display mode").setDesc("How to display boolean values in cards").addDropdown(c=>c.addOption("both","Both checkbox and text").addOption("checkbox","Checkbox only").addOption("text","Text only").setValue(this.plugin.settings.booleanDisplayMode).onChange(async g=>{this.plugin.settings.booleanDisplayMode=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Show boolean labels").setDesc("Show text labels for boolean values").addToggle(c=>c.setValue(this.plugin.settings.showBooleanLabels).onChange(async g=>{this.plugin.settings.showBooleanLabels=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("True text").setDesc("Custom text to display for true values").addText(c=>c.setPlaceholder("true").setValue(this.plugin.settings.booleanTrueText).onChange(async g=>{this.plugin.settings.booleanTrueText=g||"true",await this.plugin.saveSettings()})),new h.Setting(a).setName("False text").setDesc("Custom text to display for false values").addText(c=>c.setPlaceholder("false").setValue(this.plugin.settings.booleanFalseText).onChange(async g=>{this.plugin.settings.booleanFalseText=g||"false",await this.plugin.saveSettings()})),new h.Setting(a).setName("Per-card boolean settings").setDesc("Individual cards can override these settings in their code block settings").setDisabled(!0),new h.Setting(a).setName("Mobile").setHeading(),new h.Setting(a).setName("Mobile preset").setDesc("Preset to use on mobile devices").addDropdown(c=>c.addOption("grid","Grid (balanced)").addOption("portrait","Portrait (optimized for book covers)").addOption("square","Square (1:1 cards with minimal text)").addOption("compact","Compact (side-by-side layout)").addOption("dense","Dense (maximum density)").setValue(this.plugin.settings.mobilePreset).onChange(async g=>{this.plugin.settings.mobilePreset=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Mobile columns").setDesc("Number of columns to use on mobile devices (default: 1)").addSlider(c=>c.setLimits(1,3,1).setValue(this.plugin.settings.mobileColumns).setDynamicTooltip().onChange(async g=>{this.plugin.settings.mobileColumns=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Mobile scrollable properties").setDesc("Enable scrolling for card properties on mobile devices").addToggle(c=>c.setValue(this.plugin.settings.mobileScrollableProperties).onChange(async g=>{this.plugin.settings.mobileScrollableProperties=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Mobile content height").setDesc("Height of the scrollable content area on mobile devices").addText(c=>c.setPlaceholder("150px").setValue(this.plugin.settings.mobileContentHeight).onChange(async g=>{this.plugin.settings.mobileContentHeight=g||"150px",await this.plugin.saveSettings()})),new h.Setting(a).setName("Force mobile mode").setDesc("Force the plugin to use mobile settings even on desktop (for testing)").addToggle(c=>c.setValue(this.plugin.settings.forceMobileMode).onChange(async g=>{this.plugin.settings.forceMobileMode=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Performance").setHeading(),new h.Setting(a).setName("Enable lazy loading").setDesc("Only load images when they become visible (improves performance with many cards)").addToggle(c=>c.setValue(this.plugin.settings.enableLazyLoading).onChange(async g=>{this.plugin.settings.enableLazyLoading=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Updates").setHeading(),new h.Setting(a).setName("Enable dynamic updates").setDesc("Automatically update DataCards when properties change (may impact performance)").addToggle(c=>c.setValue(this.plugin.settings.enableDynamicUpdates).onChange(async g=>{this.plugin.settings.enableDynamicUpdates=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Refresh delay").setDesc("Delay in milliseconds before refreshing after a property change (higher values give more time to complete typing)").addSlider(c=>c.setLimits(500,5e3,500).setValue(this.plugin.settings.refreshDelay).setDynamicTooltip().onChange(async g=>{this.plugin.settings.refreshDelay=g,await this.plugin.saveSettings()})).addExtraButton(c=>c.setIcon("reset").setTooltip("Reset to default (2500ms)").onClick(async()=>{this.plugin.settings.refreshDelay=2500,await this.plugin.saveSettings(),this.display()})),new h.Setting(a).setName("Per-card dynamic updates").setDesc('Individual cards can override the global setting with "dynamicUpdate: true/false" in their settings').setDisabled(!0),new h.Setting(a).setName("Developer").setHeading(),new h.Setting(a).setName("Debug mode").setDesc("Enable debug logging (only use during development or troubleshooting)").addToggle(c=>c.setValue(this.plugin.settings.debugMode).onChange(async g=>{this.plugin.settings.debugMode=g,await this.plugin.saveSettings()})),new h.Setting(a).setName("Help").setHeading();let e=a.createEl("div"),t=e.createEl("p"),i=t.createEl("strong",{text:"Basic Usage:"});t.createEl("br"),t.appendText("Use the "),t.createEl("code",{text:"datacards"}),t.appendText(" code block to create card layouts from Dataview queries."),e.createEl("p").createEl("strong",{text:"Example:"}),e.createEl("pre").createEl("code").setText(`\`\`\`datacards
TABLE title, author, rating, cover FROM #books
SORT rating DESC

// Settings
preset: grid
imageFit: contain
defaultDateFormat: YYYY
\`\`\``);let l=e.createEl("p");l.createEl("strong",{text:"Important:"}),l.appendText(" You must explicitly include all properties you want to display in your Dataview query (including the image property).");let d=e.createEl("p");d.createEl("strong",{text:"Image Support:"}),d.createEl("br"),d.appendText("The plugin supports external URLs, vault images, and wiki links:"),d.createEl("br"),d.createEl("code",{text:"cover: https://example.com/image.jpg"}),d.appendText(" or "),d.createEl("code",{text:"cover: [[path/to/image.jpg]]"});let u=e.createEl("p");u.createEl("strong",{text:"Tip:"}),u.appendText(' Data Cards works best with the Editor-Setting "Readable line length" disabled.'),e.createEl("br");let m=e.createEl("p").createEl("a",{text:"View documentation homepage",href:"https://sophokles187.github.io/data-cards/#/"});m.setAttribute("target","_blank"),m.setAttribute("rel","noopener")}};var s=class{static setDebugMode(a){this.debugMode=a}static error(a,...e){console.error(`[DataCards] ${a}`,...e)}static warn(a,...e){console.warn(`[DataCards] ${a}`,...e)}static debug(a,...e){this.debugMode&&console.log(`[DataCards] ${a}`,...e)}};s.debugMode=!1;var T=class{parseDataCardsBlock(a){s.debug("Parsing datacards block");let e=/\n-{3,}\n|\n\/\/\s*Settings.*|\n\/\*\s*Settings\s*\*\/.*/,t=a.match(e),i=/^\/\/\s*Settings.*/,o=a.match(i),r,n;t&&t.index!==void 0?(s.debug("Found settings separator at index:",t.index),r=a.substring(0,t.index).trim(),n=a.substring(t.index+t[0].length).trim()):o?(s.debug("Block starts with settings marker"),r="",n=a.substring(o[0].length).trim()):(s.debug("No settings separator found"),r=a.trim(),n=""),s.debug("Extracted query:",r),r=this.ensureQueryType(r);let l=this.parseSettings(n),d=this.extractColumnAliases(r);return d.length>0&&(l.columnAliases=d,s.debug("Extracted column aliases:",d)),{query:r,settings:l}}extractColumnAliases(a){let e=[];if(!a.trim().toUpperCase().startsWith("TABLE"))return e;try{let t=a.match(/TABLE\s+(without\s+id\s+)?([\s\S]*?)(?:\s+FROM|\s+WHERE|\s+SORT|\s+GROUP BY|\s+LIMIT|\s+FLATTEN|$)/i);if(!t||!t[2])return e;let i=t[2].trim();if(s.debug("Extracted columns text:",i),!i)return e;let o=this.splitColumnsPreservingExpressions(i);for(let r of o){let n=r.match(/^(.*?)\s+as\s+(?:"([^"]+)"|'([^']+)'|([^\s,]+))$/i);if(n){let l=n[1].trim(),d=n[2]||n[3]||n[4],u=l;if(/^[a-zA-Z0-9_.-]+$/.test(l))u=l;else{let p=l.match(/\(\s*".*?"\s*\+\s*([a-zA-Z0-9_.-]+)\s*\+\s*".*?"\s*\)/);p&&p[1]&&(u=p[1],s.debug(`Extracted field name from complex expression: ${u}`))}e.push({original:u,alias:d,expression:l}),s.debug(`Found column alias: ${u} as "${d}"`)}}}catch(t){s.error("Error extracting column aliases:",t)}return e}splitColumnsPreservingExpressions(a){let e=[],t="",i=0,o=!1,r=!1;for(let n=0;n<a.length;n++){let l=a[n];if(l==='"'&&!r?o=!o:l==="'"&&!o&&(r=!r),!o&&!r&&(l==="("?i++:l===")"&&i--),l===","&&i===0&&!o&&!r){e.push(t.trim()),t="";continue}t+=l}return t.trim()&&e.push(t.trim()),e}ensureQueryType(a){if(!/\b(TABLE|LIST|TASK|CALENDAR)\b/i.test(a)){let t=a.split(`
`),i=-1;for(let o=0;o<t.length;o++){let r=t[o].trim();if(r&&!r.startsWith("//")&&!r.startsWith("/*")){i=o;break}}if(i>=0){let o=this.parseSettings(t.slice(i+1).join(`
`)),r="",n=[];return o.imageProperty&&n.push(o.imageProperty),r="",s.debug("Using simple TABLE query without property list"),r.trim()===""?t[i]="TABLE "+t[i]:t[i]="TABLE"+r+" "+t[i],t.join(`
`)}else return"TABLE "+a}return a}parseSettings(a){if(!a)return{};let e={},t=a.split(`
`);s.debug("Parsing settings from text");for(let i of t){if(i.trim().startsWith("//")||i.trim().startsWith("/*")||!i.trim())continue;let o=i.match(/^\s*([a-zA-Z0-9_]+)\s*:\s*(.+)\s*$/);if(o){let[,r,n]=o;if(s.debug(`Found setting: ${r} = ${n}`),r==="properties"&&n.trim().startsWith("[")&&n.trim().endsWith("]")){s.debug("Detected properties array");let l=n.substring(1,n.length-1).trim();if(l){let d=l.split(",").map(u=>u.trim());e[r]=d}else e[r]=[]}else r==="defaultDateFormat"?e[r]=n.trim():r==="dynamicUpdate"?(e[r]=this.parseValue(n.trim()),s.debug(`Parsed dynamicUpdate setting: ${e[r]}`)):e[r]=this.parseValue(n.trim())}}return e}parseValue(a){s.debug("Parsing value:",a);try{return JSON.parse(a)}catch(e){}if(a.startsWith("[")&&a.endsWith("]")){s.debug("Detected array syntax");let e=a.substring(1,a.length-1).trim();return e?e.split(",").map(i=>i.trim()):[]}return/^-?\d+(\.\d+)?$/.test(a)?Number(a):a.toLowerCase()==="true"?!0:a.toLowerCase()==="false"?!1:a}};var y=require("obsidian");var S=class{constructor(a,e){this.currentSettings=null;this.app=a,this.pluginSettings=e}updateSettings(a){this.pluginSettings=a}isMobileDevice(){return y.Platform.isMobile||this.pluginSettings.forceMobileMode}renderCards(a,e,t,i){s.debug("SPECIAL CHECK - renderCards called with results:",e);let o=!1;if(e&&e.values&&Array.isArray(e.values)&&e.values.length===0?(s.debug("Empty table detected in renderCards"),o=!0):Array.isArray(e)&&e.length===0?(s.debug("Empty array detected in renderCards"),o=!0):e&&typeof e=="object"&&!Array.isArray(e)&&Object.keys(e).length===2&&(s.debug("Object with exactly 2 keys detected in renderCards:",Object.keys(e)),o=!0),o){s.debug("Rendering empty state from renderCards"),this.renderEmptyState(a,"No notes found");return}let r=this.isMobileDevice();s.debug("Is mobile device:",r);let n={...this.pluginSettings};s.debug("Initial settings from plugin:",{preset:n.preset,imageHeight:n.imageHeight,mobileColumns:n.mobileColumns,mobilePreset:n.mobilePreset,mobileImageHeight:n.mobileImageHeight}),n={...n,...t},s.debug("After applying block settings:",{preset:n.preset,imageHeight:n.imageHeight,mobileColumns:n.mobileColumns,mobilePreset:n.mobilePreset,mobileImageHeight:n.mobileImageHeight}),r&&(s.debug("Applying mobile settings..."),s.debug(`Using mobile columns: ${n.mobileColumns}`),n.mobilePreset!==void 0&&(s.debug(`Overriding preset: ${n.preset} with mobilePreset: ${n.mobilePreset}`),n.preset=n.mobilePreset),n.mobileImageHeight!==void 0&&(s.debug(`Overriding imageHeight: ${n.imageHeight} with mobileImageHeight: ${n.mobileImageHeight}`),n.imageHeight=n.mobileImageHeight),s.debug("Final settings after applying mobile settings:",{preset:n.preset,imageHeight:n.imageHeight})),this.currentSettings=n;let l=a.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});if(l.addClass(`datacards-preset-${n.preset}`),n.enableShadows||l.addClass("datacards-no-shadows"),n.fontSize&&n.fontSize!=="default"?(l.addClass(`datacards-font-${n.fontSize}`),s.debug(`Applied font size class: datacards-font-${n.fontSize}`)):n.preset==="dense"&&(!n.fontSize||n.fontSize==="default")&&(l.addClass("datacards-font-small"),s.debug("Applied small font size for dense preset")),l.setAttribute("data-card-gap",`${n.cardSpacing}`),n.dynamicColumns&&!r){s.debug("Using dynamic columns layout"),l.addClass("datacards-dynamic-columns");let c=n.minCardWidth||"250px";(typeof c=="number"||/^\d+$/.test(c))&&(c=`${c}px`),l.setAttribute("data-min-card-width",c),l.style.setProperty("--min-card-width",c);let g=c.replace("px","");["200","220","250","280","300","320","350","400"].includes(g)&&l.addClass(`datacards-min-width-${g}`),s.debug(`Using dynamic columns with min card width: ${c}`)}else{let m;if(r)m=n.mobileColumns;else{let c=3;n.preset==="dense"?c=6:n.preset==="compact"||n.preset==="square"?c=4:n.preset==="portrait"&&(c=3),m=n.columns!==void 0?n.columns:c}s.debug(`Using ${m} fixed columns`),l.setAttribute("data-columns",m.toString()),l.addClass(`datacards-columns-${m}`)}let u;n.preset==="portrait"?u="350px":n.preset==="square"||n.preset==="compact"?u="200px":n.preset==="dense"?u="120px":u="200px",n.imageHeight!==void 0&&(u=n.imageHeight),(typeof u=="number"||/^\d+$/.test(u))&&(u=`${u}px`),l.setAttribute("data-image-height",u),l.addClass(`datacards-image-height-${u.replace("px","")}`);let p;p=n.preset==="portrait"?"contain":"cover",n.imageFit!==void 0&&(p=n.imageFit),l.setAttribute("data-image-fit",p),l.addClass(`datacards-image-fit-${p}`),e&&e.values&&Array.isArray(e.values)?(s.debug("Detected table-like results with values array"),this.renderTableResults(l,e,n,i)):e&&Array.isArray(e)?(s.debug("Detected array results"),this.renderArrayResults(l,e,n,i)):e&&typeof e=="object"?(s.debug("Detected object results"),this.renderObjectResults(l,e,n,i)):(s.debug("No valid results detected"),this.renderError(l,"No results or unsupported result type"))}renderError(a,e){a.createEl("div",{cls:"datacards-error",text:e})}renderEmptyState(a,e="No notes found"){s.debug("renderEmptyState called with message:",e);let t=a.createEl("div",{cls:"datacards-container",attr:{"data-datacards-container":"true"}});s.debug("Created cards container for empty state"),t.createEl("div",{cls:"datacards-empty-state",text:e}),s.debug("Added empty state element with class:","datacards-empty-state")}renderTableResults(a,e,t,i){let{values:o,headers:r}=e;s.debug("Rendering table results:"),s.debug("- Headers:",r),s.debug("- Number of rows:",o.length),o.forEach((n,l)=>{s.debug(`Processing row ${l}`);let d=this.createCardElement(a);t.imageProperty&&n[r.indexOf(t.imageProperty)]!==void 0&&this.addImageToCard(d,n[r.indexOf(t.imageProperty)]);let u=d.createEl("div",{cls:"datacards-content"}),p=null;if(r.includes("File")||r.includes("file")){let f=r.findIndex(k=>k.toLowerCase()==="file");f>=0&&(p=n[f])}if(!p&&n.file&&(p=n.file),!p&&n.path&&(p=n.path),!p&&n.source&&(p=n.source),!p&&n.originalFile&&(p=n.originalFile),p&&t.showFileAsTitle){let f=u.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(f,p),t.enableClickableCards&&this.makeCardClickable(d,p)}else p&&t.enableClickableCards&&this.makeCardClickable(d,p);let m=u.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){m.addClass("datacards-scrollable-properties");let f=this.getContentHeight(t);m.setAttribute("data-content-height",f),m.addClass(`datacards-content-height-${f.replace("px","")}`)}let g=[];t.properties==="all"?(g=[...r],s.debug("Using all headers as properties:",g)):Array.isArray(t.properties)?(g=[...t.properties],s.debug("Using specified properties:",g)):s.debug("No properties specified, using empty array");let x=g.filter(f=>!t.exclude.includes(f)&&f!==t.imageProperty&&f.toLowerCase()!=="file");s.debug("Filtered properties (after excluding file):",x),x.forEach(f=>{if(s.debug(`Checking property '${f}' in headers:`,r.includes(f)),r.includes(f)){let k=r.indexOf(f),M=n[k];s.debug(`Property '${f}' value:`,M),s.debug(`Property '${f}' type:`,typeof M),this.addPropertyToCard(m,f,M,t,i)}else s.debug(`Property '${f}' not found in headers`)}),x.length===0&&!r.some(f=>f.toLowerCase()==="file")&&(s.debug("No properties were added to the card"),u.createEl("div",{cls:"datacards-property",text:"No properties to display"}))})}renderArrayResults(a,e,t,i){e.forEach(o=>{let r=this.createCardElement(a);t.imageProperty&&o[t.imageProperty]&&this.addImageToCard(r,o[t.imageProperty]);let n=r.createEl("div",{cls:"datacards-content"}),l=null;if("file"in o&&(l=o.file),!l&&"path"in o&&(l=o.path),l){let g=n.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(g,l),t.enableClickableCards&&this.makeCardClickable(r,l)}let d=n.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){d.addClass("datacards-scrollable-properties");let g=this.getContentHeight(t);d.setAttribute("data-content-height",g),d.addClass(`datacards-content-height-${g.replace("px","")}`)}let p=Object.keys(o);(t.properties==="all"?p:Array.isArray(t.properties)?t.properties:[]).filter(g=>!t.exclude.includes(g)&&g!==t.imageProperty&&g.toLowerCase()!=="file").forEach(g=>{g in o&&this.addPropertyToCard(d,g,o[g],t,i)})})}renderObjectResults(a,e,t,i){let o=this.createCardElement(a);t.imageProperty&&e[t.imageProperty]&&this.addImageToCard(o,e[t.imageProperty]);let r=o.createEl("div",{cls:"datacards-content"});if("file"in e){let m=r.createEl("div",{cls:"datacards-property datacards-file-property-container"});this.formatFileProperty(m,e.file),t.enableClickableCards&&this.makeCardClickable(o,e.file)}let n=r.createEl("div",{cls:"datacards-properties-container"});if(this.shouldUseScrollableProperties(t)){n.addClass("datacards-scrollable-properties");let m=this.getContentHeight(t);n.setAttribute("data-content-height",m),n.addClass(`datacards-content-height-${m.replace("px","")}`)}let d=Object.keys(e);(t.properties==="all"?d:Array.isArray(t.properties)?t.properties:[]).filter(m=>!t.exclude.includes(m)&&m!==t.imageProperty&&m.toLowerCase()!=="file").forEach(m=>{m in e&&this.addPropertyToCard(n,m,e[m],t,i)})}createCardElement(a){var t;let e=a.createEl("div",{cls:"datacards-card"});return(t=this.currentSettings)!=null&&t.enableClickableCards&&e.addClass("datacards-clickable-card"),e}makeCardClickable(a,e){if(!e)return;let t;if(typeof e=="object"&&e!==null?"path"in e?t=e.path:"link"in e?t=e.link:t=String(e):t=String(e),t.includes("[[")&&t.includes("]]")){let i=t.match(/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/);i?t=i[1]:t=t.substring(2,t.length-2).split("|")[0]}a.addClass("datacards-clickable-card"),a.addEventListener("click",i=>{i.target.closest(".internal-link")||(this.app.workspace.openLinkText(t,"",!1,{active:!0}),i.stopPropagation())})}addImageToCard(a,e){var r;let t=a.createEl("div",{cls:"datacards-image-container"});if(Array.isArray(e))if(s.debug("Image value is an array, taking first image:",e),e.length>0)e=e[0],s.debug("Using first image from array:",e);else{s.debug("Image array is empty");let n=t.createEl("div",{cls:"datacards-image-placeholder",text:"No images available"});return}let i;typeof e=="object"&&e!==null?(s.debug("Image value is an object:",e),"path"in e?(i=e.path,s.debug("Extracted path from Link object:",i)):(i=String(e),s.debug("Converted object to string:",i))):(i=String(e),s.debug("Image value is a string:",i)),i=this.extractImageSource(i),s.debug("After image source extraction:",i);let o=t.createEl("div",{cls:"datacards-image-placeholder",text:"Loading image..."});(r=this.currentSettings)!=null&&r.enableLazyLoading?this.lazyLoadImage(t,o,i):this.loadImage(t,o,i).catch(n=>{s.debug("Error loading image:",n),o.setText("Error loading image")})}extractImageSource(a){if(!a||typeof a!="string")return String(a||"");let e=a.match(/!\[(.*?)\]\((.*?)\)/);if(e){let o=e[2];return s.debug("Extracted URL from markdown image syntax:",o),o.replace(/['",.;:]+$/,"")}let t=a.match(/\[\[(.*?)\]\]/);if(t){let o=`[[${t[1]}]]`;return s.debug("Extracted wiki link:",o),o}let i=a.match(/(https?:\/\/[^\s"'<>[\]{}]+)/);if(i){let o=i[1];return s.debug("Extracted URL:",o),o.replace(/['",.;:]+$/,"")}return a}lazyLoadImage(a,e,t){s.debug("Lazy loading image:",t),new IntersectionObserver((o,r)=>{o.forEach(n=>{n.isIntersecting&&(s.debug("Image container is now visible, loading image:",t),this.loadImage(a,e,t).catch(l=>{s.debug("Error in lazy loading image:",l),e.setText("Error loading image")}),r.disconnect())})},{rootMargin:"100px",threshold:.1}).observe(a)}async loadImage(a,e,t){let i=t.match(/!\[(.*?)\]\((.*?)\)/);if(i){let o=i[2];s.debug("Extracted URL from markdown image syntax:",o),await this.loadImage(a,e,o);return}if(t.startsWith("http")||t.startsWith("https")){s.debug("Handling as external URL:",t);let o=t.replace(/['",.;:]+$/,"");s.debug("Cleaned URL:",o),await this.loadExternalImage(a,e,o)}else if(t.startsWith("[[")&&t.endsWith("]]")){s.debug("Handling as wiki link");let o=t.substring(2,t.length-2),r=o;o.includes("|")&&(r=o.split("|")[0]);try{let n=this.app.vault.getAbstractFileByPath(r);if(n&&n instanceof y.TFile){s.debug("Found file in vault:",n);let l=this.app.vault.getResourcePath(n);s.debug("Resource path:",l);let d=a.createEl("img",{cls:"datacards-image",attr:{src:l}});d.onload=()=>{e.remove(),d.addClass("loaded")},d.onerror=()=>{e.setText("Image not found")}}else s.debug("File not found in vault or not a file:",r),e.setText("Image not found")}catch(n){s.debug("Error loading image:",n),e.setText("Error loading image")}}else{s.debug("Handling as local path");try{let o=this.app.vault.getAbstractFileByPath(t);if(o&&o instanceof y.TFile){s.debug("Found file in vault:",o);let r=this.app.vault.getResourcePath(o);s.debug("Resource path:",r);let n=a.createEl("img",{cls:"datacards-image",attr:{src:r}});n.onload=()=>{e.remove(),n.addClass("loaded")},n.onerror=()=>{e.setText("Image not found")}}else s.debug("File not found in vault:",t),e.setText("Image not found")}catch(o){s.debug("Error loading image:",o),e.setText("Error loading image")}}}async loadExternalImage(a,e,t){s.debug("Loading external image with URL:",t);let i=a.createEl("img",{cls:"datacards-image",attr:{src:t,crossorigin:"anonymous"}});i.onload=()=>{s.debug("External image loaded successfully:",t),e.remove(),i.addClass("loaded")},i.onerror=async()=>{s.debug("Failed to load external image with crossorigin attribute:",t),s.debug("Trying again without crossorigin attribute"),i.removeAttribute("crossorigin"),i.onload=()=>{s.debug("External image loaded successfully without crossorigin:",t),e.remove(),i.addClass("loaded")},i.onerror=async()=>{var o;s.debug("Failed to load external image without crossorigin:",t),s.debug("Trying with requestUrl and base64 encoding:",t);try{let r=await(0,y.requestUrl)({url:t});if(r.arrayBuffer&&r.status===200){let n=this.arrayBufferToBase64(r.arrayBuffer),d=`data:${((o=r.headers)==null?void 0:o["content-type"])||"image/png"};base64,${n}`;i.src=d,i.onload=()=>{s.debug("External image loaded successfully via requestUrl and base64:",t),e.remove(),i.addClass("loaded")},i.onerror=()=>{s.debug("Failed to load image with base64 encoding:",t),e.setText("Image not found - URL: "+t)}}else throw new Error(`Failed to fetch image: ${r.status}`)}catch(r){s.debug("All attempts to load image failed:",t,r),e.setText("Image not found - URL: "+t)}}}}arrayBufferToBase64(a){let e="",t=new Uint8Array(a),i=t.byteLength;for(let o=0;o<i;o++)e+=String.fromCharCode(t[o]);return window.btoa(e)}addPropertyToCard(a,e,t,i,o){s.debug(`Adding property to card: ${e} = ${t}`),s.debug(`Property type: ${typeof t}`);let r=a.createEl("div",{cls:"datacards-property"});i.propertiesAlign&&r.addClass(`datacards-text-${i.propertiesAlign}`);let n=e;if(i.columnAliases){let l=i.columnAliases.find(d=>d.original===e);l&&(n=l.alias,s.debug(`Using alias "${n}" for property "${e}"`))}if(i.showLabels){let l=r.createEl("div",{cls:"datacards-property-label",text:n});i.propertiesAlign&&l.addClass(`datacards-text-${i.propertiesAlign}`)}if(e.toLowerCase()==="file")this.formatFileProperty(r,t);else{let l=i.propertyFormatters[e];l?this.formatPropertyWithCustomFormatter(r,t,l):this.formatPropertyByType(r,t,o)}}formatPropertyWithCustomFormatter(a,e,t){let i=a.createEl("div",{cls:"datacards-property-value"});switch(t.type){case"stars":this.formatAsStars(i,e,t.options);break;case"badge":this.formatAsBadge(i,e,t.options);break;case"progress":this.formatAsProgress(i,e,t.options);break;case"date":this.formatAsDate(i,e,t.options);break;case"tags":this.formatAsTags(i,e);break;default:i.setText(String(e))}}processRichText(a,e,t){if(typeof e!="string")return!1;s.debug("Processing rich text:",e);let i=/<([a-z][a-z0-9]*)\b[^>]*>.*?<\/\1>/i.test(e),o=i||/<[a-z][\s\S]*>/i.test(e),r=e.includes("[[");if(!r&&!o)return s.debug("Content is plain text, skipping rich text processing."),!1;if(s.debug(`Content has wiki links: ${r}, has HTML: ${o}, has complete HTML: ${i}`),i){s.debug("Rendering complete HTML elements");let l=document.createElement("div");for(l.innerHTML=e;l.firstChild;)a.appendChild(l.firstChild);return!0}let n=this.tokenizeRichText(e);return s.debug("Tokens:",n),n.forEach(l=>{l.type==="wikilink"?this.createWikiLink(a,l.content):l.type==="url"?a.createEl("a",{cls:"external-link",text:l.content,attr:{href:l.content,target:"_blank",rel:"noopener"}}):(l.type==="html"||l.type==="text")&&y.MarkdownRenderer.render(this.app,l.content,a,"",t)}),!0}tokenizeRichText(a){let e=[];if(/<([a-z][a-z0-9]*)\b[^>]*>.*?<\/\1>/i.test(a))return e.push({type:"html",content:a}),e;let i=/(\[\[.*?\]\])|(<[^>]+>|&[a-zA-Z#0-9]+;)|(https?:\/\/[^\s"'<>[\]{}]+)/g,o=0,r;for(;(r=i.exec(a))!==null;)r.index>o&&e.push({type:"text",content:a.substring(o,r.index)}),r[1]?e.push({type:"wikilink",content:r[1]}):r[2]?e.push({type:"html",content:r[2]}):r[3]&&e.push({type:"url",content:r[3]}),o=r.index+r[0].length;return o<a.length&&e.push({type:"text",content:a.substring(o)}),e}createWikiLink(a,e){var l;s.debug("Creating wiki link from text:",e);let t=/\[\[([^\]|]+)(?:\|([^\]]+))?\]\]/,i=e.match(t);if(!i){a.appendChild(document.createTextNode(e)),s.debug("Invalid wiki link format passed to createWikiLink:",e);return}let o=i[1],r=i[2]||o;s.debug(`Creating wiki link: path="${o}", display="${r}"`);let n=a.createEl("a",{cls:"internal-link",text:r,attr:{href:o,"data-href":o,"data-type":"link",target:"_blank",rel:"noopener"}});try{this.app.workspace.hoverPopover?this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:n,targetEl:n,linktext:o,sourcePath:(l=this.app.workspace.getActiveFile())==null?void 0:l.path}):s.debug("Hover popover not available, skipping hover registration.")}catch(d){s.debug("Error registering hover link:",d)}}formatPropertyByType(a,e,t){var o,r,n,l;s.debug("formatPropertyByType called with value:",e),s.debug("Value type:",typeof e),typeof e=="string"&&(s.debug("String value length:",e.length),s.debug("String value exact content:",JSON.stringify(e)));let i=a.createEl("div",{cls:"datacards-property-value"});if(a.hasClass("datacards-text-left")?i.addClass("datacards-text-left"):a.hasClass("datacards-text-center")?i.addClass("datacards-text-center"):a.hasClass("datacards-text-right")&&i.addClass("datacards-text-right"),e==null)i.setText("");else if(Array.isArray(e))s.debug("Processing array value:",e),e.forEach((d,u)=>{if(u>0&&i.appendChild(document.createTextNode(", ")),typeof d=="string"){let p=d.replace(/^["'](.*?)["']$/,"$1");s.debug(`Processing array item ${u}:`,{original:d,cleaned:p}),p.match(/^\[\[(.*?)\]\]$/)?(s.debug(`Creating wiki link from array item: ${p}`),this.createWikiLink(i,p)):this.containsUrl(p)?(s.debug(`Array item contains URLs: ${p}`),this.renderTextWithUrls(i,p)):(s.debug(`Treating array item as plain/rich text: ${p}`),this.processRichText(i,p,t)||i.appendChild(document.createTextNode(p)))}else if(typeof d=="object"&&d!==null&&"path"in d&&"type"in d&&d.type==="file"){s.debug("Handling Dataview Link object within array:",d);let p=d.path,m=d.display||this.getCleanFilename(p);this.createWikiLink(i,`[[${p}|${m}]]`)}else s.debug(`Treating array item as other type: ${d}`),i.appendChild(document.createTextNode(String(d)))});else if(typeof e=="boolean"){s.debug(`Formatting boolean property with value: ${e} (${typeof e})`);let d=i.createEl("div",{cls:"datacards-boolean-container"});a.hasClass("datacards-text-left")?d.addClass("datacards-text-left"):a.hasClass("datacards-text-center")?d.addClass("datacards-text-center"):a.hasClass("datacards-text-right")&&d.addClass("datacards-text-right");let u=((o=this.currentSettings)==null?void 0:o.booleanDisplayMode)||"both",p=((r=this.currentSettings)==null?void 0:r.showBooleanLabels)!==!1,m=((n=this.currentSettings)==null?void 0:n.booleanTrueText)||"true",c=((l=this.currentSettings)==null?void 0:l.booleanFalseText)||"false";if((u==="both"||u==="text")&&p){if(u==="text"){let g=d.createEl("input",{cls:"datacards-checkbox datacards-hidden-checkbox",attr:{type:"checkbox",disabled:"disabled","data-boolean-value":e.toString()}});g.checked=e}d.createEl("span",{cls:"datacards-boolean-text",text:e?m:c})}if(u==="both"||u==="checkbox"){let g=d.createEl("input",{cls:"datacards-checkbox",attr:{type:"checkbox",disabled:"disabled","data-boolean-value":e.toString()}});g.checked=e,s.debug(`Created checkbox with checked=${e}, data-boolean-value=${e.toString()}`)}}else if(typeof e=="number")i.setText(e.toString());else if(e instanceof Date)this.formatAsDate(i,e);else if(typeof e=="string"){if(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2}$/.test(e)||/^\d{4}-\d{2}-\d{2}$/.test(e)){let p=new Date(e);if(!isNaN(p.getTime())){this.formatAsDate(i,p);return}}if(this.processRichText(i,e,t))return;let u=e.match(/!\[(.*?)\]\((.*?)\)/);if(u){s.debug("Found markdown image in property value (fallback)");let p=u[2],m=u[1];i.addClass("loading");let c=i.createEl("img",{cls:"datacards-property-image loading",attr:{src:p,alt:m||"Image",crossorigin:"anonymous"}});c.onload=()=>{s.debug("Property image loaded successfully:",p),c.removeClass("loading")},c.onerror=()=>{s.debug("Failed to load property image:",p),c.remove(),i.removeClass("loading"),i.addClass("image-error"),i.setText("Image not found: "+p)};return}if(e.startsWith("#")){i.createEl("a",{cls:"datacards-tag tag-link",text:e,attr:{href:e,"data-href":e,"data-type":"tag"}});return}this.containsUrl(e)?(s.debug("Text contains URLs, converting to clickable links:",e),this.renderTextWithUrls(i,e)):(s.debug("Treating value as plain text:",e),i.setText(e))}else if(typeof e=="object"&&e!==null){if("path"in e&&"type"in e&&e.type==="file"){s.debug("Handling Dataview Link object:",e);let d=e.path,u=e.display||this.getCleanFilename(d);s.debug(`Creating link from Dataview Link object: path="${d}", display="${u}"`),this.createWikiLink(i,`[[${d}|${u}]]`);return}if("ts"in e&&typeof e.ts=="number"){let d=new Date(e.ts);if(!isNaN(d.getTime())){this.formatAsDate(i,d);return}}i.setText(String(e))}else i.setText(String(e))}formatAsStars(a,e,t){let i=(t==null?void 0:t.max)||5,o="\u2605",r="\u2606",n=a.createEl("div",{cls:"datacards-stars"}),l=Math.min(Math.max(0,e),i);for(let d=0;d<l;d++)n.createEl("span",{cls:"datacards-star datacards-star-full",text:o});for(let d=l;d<i;d++)n.createEl("span",{cls:"datacards-star datacards-star-empty",text:r})}formatAsBadge(a,e,t){let i=a.createEl("span",{cls:"datacards-badge",text:e});if(t!=null&&t.color){let o={red:"datacards-badge-red",green:"datacards-badge-green",blue:"datacards-badge-blue",yellow:"datacards-badge-yellow",purple:"datacards-badge-purple",orange:"datacards-badge-orange",pink:"datacards-badge-pink",gray:"datacards-badge-gray"};t.color.toLowerCase()in o?i.addClass(o[t.color.toLowerCase()]):i.setAttribute("data-color",t.color)}else i.addClass("datacards-badge-default")}formatAsProgress(a,e,t){let i=(t==null?void 0:t.max)||100,o=Math.min(Math.max(0,e),i)/i*100,r=a.createEl("div",{cls:"datacards-progress-container"}),n=`datacards-progress-width-${Math.round(o/10)*10}`,l=r.createEl("div",{cls:`datacards-progress-bar ${n}`}),d=Math.round(o/5)*5;l.setAttribute("data-percentage",`${d}`),t!=null&&t.showText&&r.createEl("span",{cls:"datacards-progress-text",text:`${Math.round(o)}%`})}formatAsDate(a,e,t){let i=typeof e=="string"?new Date(e):e;if(isNaN(i.getTime())){a.setText(String(e));return}let o=(t==null?void 0:t.format)||(this.currentSettings?this.currentSettings.defaultDateFormat:C.defaultDateFormat),r=i.getFullYear(),n=i.getMonth()+1,l=i.getDate(),d=["January","February","March","April","May","June","July","August","September","October","November","December"],u=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],p=o;p=p.replace(/YYYY/g,r.toString()).replace(/MMMM/g,d[n-1]).replace(/MMM/g,u[n-1]).replace(/MM/g,n.toString().padStart(2,"0")).replace(/DD/g,l.toString().padStart(2,"0")).replace(/YY/g,r.toString().slice(-2)).replace(/\bM\b/g,n.toString()).replace(/\bD\b/g,l.toString()),a.setText(p)}formatFileProperty(a,e){var o;let t=a.createEl("div",{cls:"datacards-property-value datacards-file-property"});if((o=this.currentSettings)!=null&&o.titleAlign?t.addClass(`datacards-text-${this.currentSettings.titleAlign}`):a.hasClass("datacards-text-left")?t.addClass("datacards-text-left"):a.hasClass("datacards-text-center")?t.addClass("datacards-text-center"):a.hasClass("datacards-text-right")&&t.addClass("datacards-text-right"),e==null){t.setText("");return}let i;if(typeof e=="object"&&e!==null?"path"in e?i=e.path:"link"in e?i=e.link:i=String(e):i=String(e),i=this.extractImageSource(i),s.debug("File property after image source extraction:",i),typeof e=="string"&&e.includes("[[")&&e.includes("|")&&e.includes("]]")){s.debug("Found wiki link with pipe character:",e);let r=e.match(/\[\[.*\|(.*?)\]\]/);if(r&&r[1]){s.debug("Extracted display text:",r[1]);let n=e.match(/\[\[(.*?)\|(.*?)\]\]/);if(n){let l=n[1],d=n[2];s.debug(`Creating link from pipe syntax - path: "${l}", display: "${d}"`);let u=t.createEl("a",{cls:"internal-link datacards-file-link",text:d,attr:{href:l,"data-href":l,"data-type":"link"}});s.debug("Created link element for pipe syntax:",u);try{this.app.workspace.trigger("hover-link",{event:new MouseEvent("mouseover"),source:"preview",hoverEl:u,targetEl:u,linktext:l})}catch(p){}return}else{s.debug("Fallback to text only for pipe syntax"),t.setText(r[1]);return}}}if(i.includes("[[")&&i.includes("]]")){s.debug("Found wiki link in file property:",i);let r=i.match(/\[\[([^\]]+)\]\]/);if(r){let n=r[1],l=n,d=n;if(n.includes("|")){let u=n.split("|");d=u[0],l=u[1]}else l=this.getCleanFilename(d);t.createEl("a",{cls:"internal-link datacards-file-link",text:l,attr:{href:d,"data-href":d,"data-type":"link"}})}}else if(i.startsWith("[[")&&i.endsWith("]]")){let r=i.substring(2,i.length-2),n=r,l=r;if(r.includes("|")){let d=r.split("|");l=d[0],n=d[1]}else n=this.getCleanFilename(l);t.createEl("a",{cls:"internal-link datacards-file-link",text:n,attr:{href:l,"data-href":l,"data-type":"link"}})}else{let r=this.getCleanFilename(i);t.createEl("a",{cls:"internal-link datacards-file-link",text:r,attr:{href:i,"data-href":i,"data-type":"link"}})}}getCleanFilename(a){let e=a;return e.includes("/")&&(e=e.split("/").pop()||e),e.endsWith(".md")&&(e=e.substring(0,e.length-3)),e}formatAsTags(a,e){let t=a.createEl("div",{cls:"datacards-tags-container"});(Array.isArray(e)?e:[e]).forEach(o=>{let r=o.startsWith("#")?o:`#${o}`;t.createEl("a",{cls:"datacards-tag tag-link",text:r,attr:{href:r,"data-href":r,"data-type":"tag"}})})}shouldUseScrollableProperties(a){let e=!1;return(a.preset==="square"||a.preset==="compact")&&(e=!0),this.pluginSettings.scrollableProperties!==void 0&&(e=this.pluginSettings.scrollableProperties),this.isMobileDevice()&&this.pluginSettings.mobileScrollableProperties!==void 0&&(e=this.pluginSettings.mobileScrollableProperties),a.scrollableProperties!==void 0&&(e=a.scrollableProperties),e}getContentHeight(a){let e="200px";return this.pluginSettings.contentHeight&&(e=this.pluginSettings.contentHeight),this.isMobileDevice()&&this.pluginSettings.mobileContentHeight&&(e=this.pluginSettings.mobileContentHeight),a.contentHeight&&(e=a.contentHeight),e}containsUrl(a){return typeof a!="string"?!1:/(https?:\/\/[^\s"'<>[\]{}]+)/i.test(a)}renderTextWithUrls(a,e){if(typeof e!="string"){a.setText(String(e));return}let t=/(https?:\/\/[^\s"'<>[\]{}]+)/gi,i=0,o;for(t.lastIndex=0;(o=t.exec(e))!==null;){o.index>i&&a.appendChild(document.createTextNode(e.substring(i,o.index)));let r=o[0];a.createEl("a",{cls:"external-link",text:r,attr:{href:r,target:"_blank",rel:"noopener"}}),i=o.index+r.length}i<e.length&&a.appendChild(document.createTextNode(e.substring(i)))}};var E=class{constructor(a){this.plugin=a}isDataviewEnabled(){return this.plugin.app.plugins.plugins.dataview!==void 0}getDataviewApi(){return this.isDataviewEnabled()?this.plugin.app.plugins.plugins.dataview.api:null}async executeQuery(a,e,t){let i=this.getDataviewApi();if(!i)return null;try{return await i.query(a,e,t)}catch(o){throw s.error("Error executing Dataview query:",o),o}}async waitForDataviewReady(){let a=this.getDataviewApi();return a?a.index&&a.index.initialized?(s.debug("Dataview index is already initialized"),!0):(s.debug("Waiting for Dataview index to be ready..."),new Promise(e=>{let t=this.plugin.app,i=t.metadataCache.on("dataview:index-ready",()=>{s.debug("Dataview index is now ready"),t.metadataCache.offref(i),e(!0)});setTimeout(()=>{s.warn("Timed out waiting for Dataview index"),t.metadataCache.offref(i),e(!1)},5e3)})):!1}async executeSafeQuery(a,e,t,i=0){let o=this.getDataviewApi();if(!o)return s.error("Dataview API not found. Make sure Dataview plugin is enabled."),{successful:!1,value:"Dataview plugin is not enabled"};if(!a||a.trim()==="")return s.error("Empty Dataview query"),{successful:!1,value:"Empty query"};s.debug("Executing Dataview query:",a),s.debug("Source path:",e);try{if(typeof o.query=="function"){s.debug("Using api.query method");try{let r=await o.query(a,e,t);return s.debug("Direct query result type:",typeof r),r==null?(s.error("Direct query returned undefined or null"),{successful:!1,value:"No results returned"}):(r&&typeof r=="object"&&("values"in r&&Array.isArray(r.values)&&s.debug("Result contains a values array with length:",r.values.length),"headers"in r&&Array.isArray(r.headers)&&s.debug("Result contains headers:",r.headers)),r&&typeof r=="object"&&"values"in r&&Array.isArray(r.values)&&r.values.length===0&&i<3?(s.debug(`Empty result, retrying (attempt ${i+1}/3)...`),new Promise(n=>{setTimeout(async()=>{let l=await this.executeSafeQuery(a,e,t,i+1);n(l)},500)})):{successful:!0,value:r})}catch(r){return s.error("Error in direct query:",r),{successful:!1,value:r?r.message||String(r):"Error in query execution"}}}else return s.error("Dataview API query method not found."),{successful:!1,value:"Incompatible Dataview API version"}}catch(r){return s.error("Error executing Dataview query:",r),{successful:!1,value:r?r.message||String(r):"Unknown error"}}}};function A(b,a,e=!1){let t=null,i=null,o=null,r;function n(...l){s.debug(`Debounce called, wait time: ${a}ms, has existing timeout: ${t!==null}`);let d=this;t&&(s.debug("Clearing previous debounce timeout"),clearTimeout(t),t=null),i=l,o=d;let u=()=>{s.debug("Debounce timeout expired, executing function"),t=null,e||(r=b.apply(d,l),t||(i=o=null))},p=e&&!t;return s.debug(`Setting new debounce timeout for ${a}ms`),t=setTimeout(u,a),p&&(s.debug("Immediate execution requested"),r=b.apply(d,l),i=o=null),r}return n.cancel=()=>{t&&clearTimeout(t),t=i=o=null},n.flush=()=>(t&&(clearTimeout(t),t=null,e||(r=b.apply(o,i),i=o=null)),r),n}var D=class extends w.Plugin{constructor(){super(...arguments);this.isRefreshing=!1;this.lastActiveElement=null}async onload(){await this.loadSettings(),s.setDebugMode(this.settings.debugMode),this.parserService=new T,this.rendererService=new S(this.app,this.settings),this.dataviewApiUtil=new E(this),this.updateDebouncedRefresh(),this.registerMarkdownCodeBlockProcessor("datacards",this.processDataCardsBlock.bind(this)),this.addSettingTab(new v(this.app,this)),this.addCommand({id:"refresh-datacards",name:"Refresh cards in active view",callback:()=>{this.refreshActiveView(!0)}}),this.registerDataviewEvents(),this.registerMetaBindEvents(),s.debug("DataCards plugin loaded")}updateDebouncedRefresh(){this.debouncedRefresh=A(()=>{s.debug(`Debounced refresh executing after ${this.settings.refreshDelay}ms`),this.refreshActiveView(!1)},this.settings.refreshDelay)}registerMetaBindEvents(){this.app.workspace.onLayoutReady(()=>{var e;if(this.metaBindPlugin=(e=this.app.plugins)==null?void 0:e.plugins["meta-bind"],!this.metaBindPlugin){s.debug("Meta Bind plugin not found or Obsidian plugins structure not accessible as expected. Skipping Meta Bind event registration.");return}s.debug("Meta Bind plugin found. Registering event listeners."),this.registerEvent(this.app.metadataCache.on("changed",t=>{t&&t.path&&(s.debug(`Obsidian metadata changed for file: ${t.path}`),this.handleMetaBindChange(t.path,null,null))})),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onChange=="function"&&(s.debug("Registering using Meta Bind api.onChange"),this.registerEvent(this.metaBindPlugin.api.onChange((t,i,o)=>{let r=typeof t=="string"?t:t==null?void 0:t.path;r?(typeof o=="boolean"?s.debug(`Meta Bind onChange event (TOGGLE): file=${r}, key=${i}, value=${JSON.stringify(o)}`):s.debug(`Meta Bind onChange event: file=${r}, key=${i}, value=${JSON.stringify(o)}`),typeof o=="boolean"?(s.debug("Toggle input detected - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):this.handleMetaBindChange(r,i,o)):s.warn("Meta Bind onChange event received without a valid file path.")}))),this.metaBindPlugin.metadataManager&&typeof this.metaBindPlugin.metadataManager.on=="function"&&(s.debug("Registering using Meta Bind metadataManager events"),this.registerEvent(this.metaBindPlugin.metadataManager.on("changed",(t,i)=>{t&&t.storagePath?typeof i=="boolean"?(s.debug(`Meta Bind metadataManager 'changed' event (TOGGLE): path=${t.storagePath}, prop=${JSON.stringify(t.storageProp)}, value=${JSON.stringify(i)}`),s.debug("Toggle input detected in metadataManager - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):(s.debug(`Meta Bind metadataManager 'changed' event: path=${t.storagePath}, prop=${JSON.stringify(t.storageProp)}, value=${JSON.stringify(i)}`),this.handleMetaBindChange(t.storagePath,t.storageProp,i)):s.warn('Meta Bind metadataManager "changed" event received without a valid bindTarget.')})),this.registerEvent(this.metaBindPlugin.metadataManager.on("deleted",t=>{t&&t.storagePath&&(s.debug(`Meta Bind metadataManager 'deleted' event: path=${t.storagePath}, prop=${JSON.stringify(t.storageProp)}`),this.handleMetaBindChange(t.storagePath,t.storageProp,null))}))),this.metaBindPlugin.api&&typeof this.metaBindPlugin.api.onFieldChanged=="function"&&(s.debug("Registering using Meta Bind api.onFieldChanged"),this.registerEvent(this.metaBindPlugin.api.onFieldChanged((t,i,o,r)=>{i&&(s.debug(`Meta Bind onFieldChanged event: fieldType=${t}, file=${i}, key=${o}, value=${JSON.stringify(r)}`),t==="toggle"||typeof r=="boolean"?(s.debug("Toggle field changed - using immediate refresh"),setTimeout(()=>{this.refreshActiveView(!1)},50)):this.handleMetaBindChange(i,o,r))})))})}registerDataviewEvents(){this.app.workspace.onLayoutReady(()=>{if(!this.dataviewApiUtil.isDataviewEnabled()){s.warn("Dataview plugin is not enabled, cannot register for metadata change events");return}this.registerEvent(this.app.metadataCache.on("dataview:metadata-change",(e,t)=>{this.handleMetadataChange(e,t)})),s.debug("Registered for Dataview metadata change events")})}handleMetadataChange(e,t){if(!this.settings.enableDynamicUpdates){s.debug("Dynamic updates are disabled globally, ignoring metadata change");return}s.debug(`Dataview metadata changed: ${e} for file ${t==null?void 0:t.path}`),this.debouncedRefresh()}handleMetaBindChange(e,t,i){if(!this.settings.enableDynamicUpdates){s.debug("Dynamic updates are disabled globally, ignoring Meta Bind change");return}if(s.debug(`Meta Bind property changed: ${t} in file ${e}, value: ${JSON.stringify(i)}`),typeof i=="boolean"){s.debug(`Toggle value detected in handleMetaBindChange: ${i}`),this.forceDataviewCacheRefresh(e),setTimeout(()=>{this.refreshActiveView(!1)},50);return}this.debouncedRefresh()}forceDataviewCacheRefresh(e){if(s.debug(`Forcing Dataview cache refresh for file: ${e}`),!this.dataviewApiUtil.isDataviewEnabled()){s.warn("Dataview plugin is not enabled, cannot force cache refresh");return}try{let t=this.dataviewApiUtil.getDataviewApi();if(!t){s.warn("Dataview API not available, cannot force cache refresh");return}let i=this.app.vault.getAbstractFileByPath(e);if(!i||!("stat"in i)){s.warn(`File not found or not a file: ${e}`);return}try{let o=t.index;o&&typeof o.refreshFile=="function"?(o.refreshFile(i),s.debug(`Successfully forced Dataview cache refresh for file: ${e}`)):(this.app.metadataCache.trigger("dataview:metadata-change","update",i),s.debug(`Triggered dataview:metadata-change event for file: ${e}`))}catch(o){s.warn(`Error accessing Dataview internal API: ${o}`),this.app.metadataCache.trigger("dataview:metadata-change","update",i),s.debug(`Triggered dataview:metadata-change event for file: ${e}`)}}catch(t){s.warn(`Error forcing Dataview cache refresh: ${t}`)}}onunload(){s.debug("DataCards plugin unloaded")}async loadSettings(){this.settings=Object.assign({},C,await this.loadData())}async saveSettings(){await this.saveData(this.settings),s.setDebugMode(this.settings.debugMode),this.rendererService.updateSettings(this.settings),this.updateDebouncedRefresh(),this.refreshActiveView(!0)}async processDataCardsBlock(e,t,i){s.debug("Processing DataCards block");try{let{query:o,settings:r}=this.parserService.parseDataCardsBlock(e),n=o.toLowerCase().includes("table without id"),l=o;n&&(o.toLowerCase().includes("file")||(l=o.replace(/table without id/i,"TABLE WITHOUT ID file,")));let d=i.sourcePath,u=document.createElement("div");u.className="datacards-hidden-container",document.body.appendChild(u);let p=await this.dataviewApiUtil.executeSafeQuery(l,d,u);if(document.body.removeChild(u),Array.isArray(p.value)&&p.value.length===0){s.debug("Dataview returned empty array"),this.rendererService.renderEmptyState(t,"No notes found");return}if(p.value.values&&Array.isArray(p.value.values)&&p.value.values.length===0){s.debug("Dataview returned empty table"),this.rendererService.renderEmptyState(t,"No notes found");return}let m=p.value;m&&typeof m=="object"&&"successful"in m&&"value"in m&&(s.debug("Unwrapping nested result structure"),m=m.value);let c=new w.MarkdownRenderChild(t);i.addChild(c),this.rendererService.renderCards(t,m,r,c)}catch(o){s.error("Error executing Dataview query:",o),t.createEl("div",{cls:"datacards-error",text:`Error executing Dataview query: ${o.message||String(o)}`})}}refreshActiveView(e=!0){if(this.isRefreshing){s.debug("Refresh already in progress, skipping.");return}this.isRefreshing=!0,s.debug("Starting refreshActiveView...");let t=this.app.workspace.getActiveViewOfType(w.MarkdownView);t&&t.previewMode?(t.previewMode.rerender(!0),e&&new w.Notice("DataCards refreshed",2e3),setTimeout(()=>{this.isRefreshing=!1,s.debug("Refresh finished.")},250)):(e&&new w.Notice("No active markdown view to refresh",2e3),this.isRefreshing=!1,s.debug("No active markdown view found."))}};

/* nosourcemap */